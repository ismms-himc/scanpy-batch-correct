{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1.0 Batch Correction Example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "scanpy==1.3.7 anndata==0.6.16 numpy==1.15.4 scipy==1.1.0 pandas==0.23.4 scikit-learn==0.20.2 statsmodels==0.9.0 python-igraph==0.7.1 louvain==0.6.1 \n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import scanpy as sc\n",
    "\n",
    "sc.settings.verbosity = 3             # verbosity: errors (0), warnings (1), info (2), hints (3)\n",
    "sc.logging.print_versions()\n",
    "results_file = './write/pbmc3k.h5ad'  # the file that will store the analysis results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "sc.settings.set_figure_params(dpi=80)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "... reading from cache file ./cache/data-pbmc3k_filtered_gene_bc_matrices-hg19-matrix.h5ad\n"
     ]
    }
   ],
   "source": [
    "adata_1 = sc.read_10x_mtx(\n",
    "    '../data/pbmc3k_filtered_gene_bc_matrices/hg19/',  # the directory with the `.mtx` file\n",
    "    var_names='gene_symbols',                  # use gene symbols for the variable names (variables-axis index)\n",
    "    cache=True)                                # write a cache file for faster subsequent reading"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "... reading from cache file ./cache/data-pbmc3k_filtered_gene_bc_matrices-hg19-matrix.h5ad\n"
     ]
    }
   ],
   "source": [
    "adata_2 = sc.read_10x_mtx(\n",
    "    '../data/pbmc3k_filtered_gene_bc_matrices/hg19/',  # the directory with the `.mtx` file\n",
    "    var_names='gene_symbols',                  # use gene symbols for the variable names (variables-axis index)\n",
    "    cache=True)                                # write a cache file for faster subsequent reading"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# dir(sc.pp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sc.pp.mnn_correct(adata_1, adata_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sc.pp.mnn_correct.mnn_correct(adata_1, adata_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# dir(sc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Following Instructions from MNNPY Repo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import scanpy.api as sc\n",
    "import mnnpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Performing cosine normalization...\n",
      "Starting MNN correct iteration. Reference batch: 0\n",
      "Step 1 of 1: processing batch 1\n",
      "  Looking for MNNs...\n",
      "  Computing correction vectors...\n",
      "  Adjusting variance...\n",
      "  Applying correction...\n",
      "MNN correction complete. Gathering output...\n",
      "Packing AnnData object...\n",
      "Done.\n"
     ]
    }
   ],
   "source": [
    "corrected = mnnpy.mnn_correct(adata_1, adata_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(AnnData object with n_obs × n_vars = 5400 × 32738 \n",
       "     obs: 'batch'\n",
       "     var: 'gene_ids-0', 'gene_ids-1',\n",
       " [0,        new cell  ref cell  original batch\n",
       "  0             0         0               0\n",
       "  1             0      1523               0\n",
       "  2             1         1               0\n",
       "  3             1       147               0\n",
       "  4             1      2057               0\n",
       "  5             1      1013               0\n",
       "  6             1       239               0\n",
       "  7             1      2676               0\n",
       "  8             2         2               0\n",
       "  9             2      2434               0\n",
       "  10            2      2092               0\n",
       "  11            2      1794               0\n",
       "  12            2       569               0\n",
       "  13            2       745               0\n",
       "  14            2       206               0\n",
       "  15            2      1963               0\n",
       "  16            2       771               0\n",
       "  17            2       211               0\n",
       "  18            2       116               0\n",
       "  19            3         3               0\n",
       "  20            3      2496               0\n",
       "  21            3       139               0\n",
       "  22            3      2421               0\n",
       "  23            3      2592               0\n",
       "  24            3       583               0\n",
       "  25            3      1703               0\n",
       "  26            4         4               0\n",
       "  27            5         5               0\n",
       "  28            5      2296               0\n",
       "  29            5       569               0\n",
       "  ...         ...       ...             ...\n",
       "  12530      2692      2692               0\n",
       "  12531      2692       290               0\n",
       "  12532      2692       943               0\n",
       "  12533      2692      2445               0\n",
       "  12534      2693      2693               0\n",
       "  12535      2694      2694               0\n",
       "  12536      2694      1193               0\n",
       "  12537      2694       779               0\n",
       "  12538      2695      2695               0\n",
       "  12539      2695      2172               0\n",
       "  12540      2695      1919               0\n",
       "  12541      2695      2112               0\n",
       "  12542      2695       827               0\n",
       "  12543      2695      1572               0\n",
       "  12544      2695       299               0\n",
       "  12545      2695      1770               0\n",
       "  12546      2695      1408               0\n",
       "  12547      2695       613               0\n",
       "  12548      2696      2696               0\n",
       "  12549      2697      2697               0\n",
       "  12550      2697      1461               0\n",
       "  12551      2698      2698               0\n",
       "  12552      2698      2608               0\n",
       "  12553      2698      2009               0\n",
       "  12554      2698      1873               0\n",
       "  12555      2698      2493               0\n",
       "  12556      2698      1795               0\n",
       "  12557      2698      1882               0\n",
       "  12558      2698       857               0\n",
       "  12559      2699      2699               0\n",
       "  \n",
       "  [12560 rows x 3 columns]],\n",
       " None)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corrected"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
